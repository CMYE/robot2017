package org.usfirst.frc.team6758.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Timer;

/**
 * This sample program shows how to control a motor using a joystick. In the
 * operator control part of the program, the joystick is read and the value is
 * written to the motor.
 *
 * Joystick analog values range from -1 to 1 and speed controller inputs also
 * range from -1 to 1 making it easy to work together. The program also delays a
 * short time in the loop to allow other threads to run. This is generally a
 * good idea, especially since the joystick values are only transmitted from the
 * Driver Station once every 20ms.
 */
public abstract class Robot extends SampleRobot {

	private SpeedController motor = new Talon(0); // initialize the motor as a
													// Talon on channel 0
	private Joystick stick = new Joystick(0); // initialize the joystick on port
	
	/**
	 * This is 1/27/17 work in progress
	 * 
	 * +_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+
	 * 
	 * @return
	 */
	
	// 0
	static Object getX(){
		return null;
	}
	static Object getY(){
		return null;
	}
	static Object getZ(){
		return null;
	}
	static Object getThrottle(){
		return null;
	}
	public static Object throttleSpeedY = getY();
	public static Object throttleSpeedX = getX();
	public static Object throttleSpeedZ = getZ();
	public static Object sliderValue = getThrottle();

	public Robot() {
	}
	
	public static int computerSpeedY = (int) (java.lang.Math.pow((double) throttleSpeedY, (2-((double) sliderValue/400)) ) /100); 
	public static int computerSpeedX = (int) (java.lang.Math.pow((double) throttleSpeedX, (2-((double) sliderValue/400)) ) /100);
	public static int computerSpeedZ = (int) (java.lang.Math.pow((double) throttleSpeedZ, (2-((double) sliderValue/400)) ) /100);
	
	private final double kUpdatePeriod = 0.005; // update every 0.005 seconds/5
	// milliseconds (200Hz)
	
	/**
	 * 
	 * 
	 * +_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+-+__+_+_+_+_+_+_++_+_+_+_+_+_+_++_++_+_+_+_+_+_++_++_+_
	 * 
	 */
	
	/**
	 * Runs the motor from a joystick.
	 */
	@Override
	public void operatorControl() {
		while (isOperatorControl() && isEnabled()) {
			// Set the motor's output.
			// This takes a number from -1 (100% speed in reverse) to +1 (100%
			// speed going forward)
			motor.set(stick.getY());

			Timer.delay(kUpdatePeriod); // wait 5ms to the next update
		}
	}
}
